; #### Main Dialog ####

alias core.kubot.dialog {
  dialog -m core.Kubot core.Kubot
}

; Main Dialog's Purpose is to launch the Script Manager, or allow the operator to easily make a new script.
dialog core.Kubot {
  title "core.Kubot"
  size -1 -1 82 33
  option dbu
  button "Launch Script Manager", 1, 3 3 76 12
  button "Create new Script", 2, 3 18 76 12
}
dialog core.kubot.newscript.dialog {
  title "New Script"
  size -1 -1 206 42
  option dbu
  text "Name your New Script, no spaces:", 1, 3 3 200 8
  edit "", 2, 3 15 128 10
  check "Automatically load script?", 3, 134 15 72 10
  button "Cancel", 4, 3 27 98 12, cancel
  button "Create", 5, 105 27 98 12, ok
}

on *:dialog:core.Kubot:sclick:1:{
  dialog -m core.Kubot.ScriptManager core.Kubot.ScriptManager
}
on *:dialog:core.Kubot:sclick:2:{
  dialog -m core.kubot.newscript.dialog core.kubot.newscript.dialog
}

on *:dialog:core.kubot.newscript.dialog:sclick:5: {
  ; If the checkmark was checked, then supply /kubot.newscript with the go-ahead to load the new script.
  var %query $iif($did($dname, 3).state == 1, load, noload)
  kubot.newscript %query $did($dname, 2).text
}



; #### Script Manager Dialog ####
; Script Manager's purpose is to find and load scripts, or allow the operator to open their folder directly.
dialog core.Kubot.ScriptManager {
  title "Script Manager"
  size -1 -1 612 180
  option dbu

  text "Scripts Found by core.KubosKubot", 1, 3 3 609 8
  text "Preferred Scripts that will be Loaded on Update", 2, 3 14 200 8
  text "Unassigned Scripts that will be Ignored on Update", 3, 206 14 200 8
  text "Non-Preferred Scripts that will be Unloaded on Update", 4, 409 14 200 8

  list 5, 3 25 200 100, sort size extsel vsbar
  list 6, 206 25 200 100, sort size extsel vsbar
  list 7, 409 25 200 100, sort size extsel vsbar

  button "Mark Preferred to Load", 8, 3 128 200 19
  button "Mark to Ignore", 9, 206 128 200 19
  button "Mark Preferred to Unload", 10, 409 128 200 19
  button "Open Scripts Folder", 11, 3 150 606 12
  button "Exit", 12, 3 165 200 12, cancel
  button "Save without Updating", 13, 206 165 200 12
  button "Save and Update", 14, 409 165 200 12, ok
}


on *:dialog:core.Kubot.ScriptManager:init:0: {
  ; When Script Manager is started, populate the lists with found scripts seperated by their preference.
  noop $findfile($mircdir $+ scripts, *.mrc, 0, kubot.populate_script_manager $1-)
  noop $findfile($mircdir $+ scripts, *.dialog, 0, kubot.populate_script_manager $1-)
}

alias kubot.populate_script_manager {
  ; When called by the Script Manager, this populates the three lists with found Scripts sorted by their preference.
  var %shortname $nopath($1-)
  var %longname $remove($1-,$mircdir)
  var %longcodename $replace(%longname, $chr(32), $chr(38) $+ space $+ $chr(38))
  ;echo -a Shortname: %shortname - Longname: %longname - LongCodename: %longcodename
  if (!$kubot.readini(kubot.populate_script_manager, .config, Filename, %longcodename, ScriptManager)) {
    ;echo -a Script not found to have a preference. Setting preference to Ignore.
    kubot.writeini kubot.populate_script_manager .config Filename %longcodename ignore scriptmanager
  }
  var %status $kubot.readini(kubot.populate_script_manager, .config, Filename, %longcodename, ScriptManager)
  ;echo -a %shortname %status
  if (%status == load) {
    did -a core.Kubot.ScriptManager 5 %longname
  }
  elseif (%status == ignore) {
    did -a core.Kubot.ScriptManager 6 %longname
  }
  elseif (%status == unload) {
    did -a core.Kubot.ScriptManager 7 %longname
  }
}

on *:dialog:core.Kubot.ScriptManager:sclick:*: {
  ;echo -a Single Click on Dialog ID $did

  if ($did isnum 8-10) {
    ; Moves highlighted Filenames to the appropriate list based on what was clicked.
    var %i $did($dname,5,0).sel
    var %j $did($dname,6,0).sel
    var %k $did($dname,7,0).sel
    var %target $calc($did - 3)
    ;echo -a Test: %i %j %k - $did

    while (%i > 0) {
      if ($did == 8) { break }
      did -a $dname %target $did(5).seltext
      did -d $dname 5 $did(5).sel
      dec %i
    }
    while (%j > 0) {
      if ($did == 9) { break }
      did -a $dname %target $did(6).seltext
      did -d $dname 6 $did(6).sel
      dec %j
    }
    while (%k > 0) {
      if ($did == 10) { break }
      did -a $dname %target $did(7).seltext
      did -d $dname 7 $did(7).sel
      dec %k
    }
  }

  if ($did == 11) {
    ; The simplest part of the whole file loader...
    ; Open the Scripts Folder.
    run $qt($mircdir $+ scripts)
  }

  if ($did isnum 13-14) {
    ; Some variable setup to show the number of lines in each list, and to record which Save button was clicked.
    var %i $did($dname,5,0).lines
    var %j $did($dname,6,0).lines
    var %k $did($dname,7,0).lines
    var %instruction $did
    ;echo -a Test: %i %j %k - %instruction

    var %n 1

    ; These loops will send the contents of the lists of the script manager to another alias for processing, to save space and efficiency.
    while (%i > 0) {
      core.kubot.scriptmanager.save %instruction load $did($dname, 5, %n).text
      inc %n
      dec %i
    }

    var %n 1
    while (%j > 0) {
      core.kubot.scriptmanager.save %instruction ignore $did($dname, 6, %n).text
      dec %j
      inc %n
    }
    var %n 1

    while (%k > 0) {
      core.kubot.scriptmanager.save %instruction unload $did($dname, 7, %n).text
      dec %k
      inc %n
    }
  }
}

alias core.kubot.scriptmanager.save {
  ; Set the codename to refer to the script to in a text document.
  var %longcodename $replace($3-, $chr(32), $chr(38) $+ space $+ $chr(38))

  ; Write to the text document the preference for a particular script.
  kubot.writeini kubot.populate_script_manager .config Filename %longcodename $2 scriptmanager

  ; If "Save and Update" was clicked, this attempts to perform the "Update."
  if ($1 == 14 && $2 != ignore) {
    ; If script was meant to be loaded...
    if ($2 == load) {
      if (!$script($mircdir $+ $3-)) {
        load -rs $qt($mircdir $+ $3-)
      }
      else {
        ;echo -a That script is already loaded.
      }
    }
    ; If script was meant to be unloaded...
    if ($2 == unload) {
      if ($script($mircdir $+ $3-)) {
        unload -rs $qt($mircdir $+ $3-)
      }
      else {
        ;echo -a That script is already unloaded.
      }
    }
  }
}

on *:dialog:core.Kubot.ScriptManager:dclick:5-7: {
  ; Open the file folder that a particular script is kept in.
  var %folder $nofile($mircdir $+ $did($dname, $did).seltext)
  ;echo -a Attempted to assemble this: %folder
  if ($isdir(%folder)) {
    run $qt(%folder)
  }
  else {
    echo -a For some reason, Kubot was unable to find " %folder "
  }
}

/* ############################################################################################################################################################################
Last time you left off, you were trying to make the Script Manager save preferences for scripts.
